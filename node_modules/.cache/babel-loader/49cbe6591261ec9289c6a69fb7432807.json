{"ast":null,"code":"import { REQUEST_TYPES_COIN, RECEIVE_TYPES_COIN_FAILURE, RECEIVE_TYPES_COIN_SUCESS, SET_EMAIL, RECEIVE_EXPENSES_SUCESS, RECEIVE_EXPENSES_FAILURE, REQUEST_EXPENSES } from './actionTypes';\nimport fetchApi from '../../services/fetchApi'; // MOEDAS (REQ-3):\n\nconst requestTypesCoin = () => ({\n  type: REQUEST_TYPES_COIN\n});\n\nconst result = money => {\n  const coinsKeys = Object.keys(money);\n  const filteredCoins = coinsKeys.filter(coin => coin !== 'USDT' ? coin : '');\n  return filteredCoins;\n};\n\nconst receiveTypeCoinSucess = coins => ({\n  type: RECEIVE_TYPES_COIN_SUCESS,\n  currencies: result(coins)\n});\n\nconst receiveTypeCoinFailure = error => ({\n  type: RECEIVE_TYPES_COIN_FAILURE,\n  error\n});\n\nexport const fetchTypesCoin = () => async dispatch => {\n  dispatch(requestTypesCoin());\n\n  try {\n    const coins = await fetchApi();\n    dispatch(receiveTypeCoinSucess(coins));\n  } catch (error) {\n    dispatch(receiveTypeCoinFailure(error));\n  }\n}; // EXPENSES:\n\nconst requestExpenses = () => ({\n  type: REQUEST_EXPENSES\n});\n\nconst receiveExpensesSucess = expenses => ({\n  type: RECEIVE_EXPENSES_SUCESS,\n  expenses\n});\n\nconst receiveExpensesFailure = error => ({\n  type: RECEIVE_EXPENSES_FAILURE,\n  error\n});\n\nconst fetchExpenses = async dispatch => {\n  dispatch(requestExpenses());\n\n  try {\n    const expenses = fetchApi();\n    delete expenses.USDT;\n    dispatch(receiveExpensesSucess(expenses));\n  } catch (error) {\n    dispatch(receiveExpensesFailure(error));\n  }\n}; // OUTRAS:\n\n\nexport function saveEmail(email) {\n  return {\n    type: SET_EMAIL,\n    email\n  };\n}","map":{"version":3,"names":["REQUEST_TYPES_COIN","RECEIVE_TYPES_COIN_FAILURE","RECEIVE_TYPES_COIN_SUCESS","SET_EMAIL","RECEIVE_EXPENSES_SUCESS","RECEIVE_EXPENSES_FAILURE","REQUEST_EXPENSES","fetchApi","requestTypesCoin","type","result","money","coinsKeys","Object","keys","filteredCoins","filter","coin","receiveTypeCoinSucess","coins","currencies","receiveTypeCoinFailure","error","fetchTypesCoin","dispatch","requestExpenses","receiveExpensesSucess","expenses","receiveExpensesFailure","fetchExpenses","USDT","saveEmail","email"],"sources":["/home/fernando/Documentos/projects-turma23/sd-023-b-project-trybewallet/src/redux/actions/index.js"],"sourcesContent":["import { REQUEST_TYPES_COIN,\n  RECEIVE_TYPES_COIN_FAILURE,\n  RECEIVE_TYPES_COIN_SUCESS,\n  SET_EMAIL,\n  RECEIVE_EXPENSES_SUCESS,\n  RECEIVE_EXPENSES_FAILURE,\n  REQUEST_EXPENSES,\n} from './actionTypes';\nimport fetchApi from '../../services/fetchApi';\n\n// MOEDAS (REQ-3):\n\nconst requestTypesCoin = () => ({\n  type: REQUEST_TYPES_COIN,\n});\n\nconst result = (money) => {\n  const coinsKeys = Object.keys(money);\n  const filteredCoins = coinsKeys.filter((coin) => (coin !== 'USDT'\n    ? coin : ''));\n  return filteredCoins;\n};\n\nconst receiveTypeCoinSucess = (coins) => ({\n  type: RECEIVE_TYPES_COIN_SUCESS,\n  currencies: result(coins),\n});\n\nconst receiveTypeCoinFailure = (error) => ({\n  type: RECEIVE_TYPES_COIN_FAILURE,\n  error,\n});\n\nexport const fetchTypesCoin = () => async (dispatch) => {\n  dispatch(requestTypesCoin());\n\n  try {\n    const coins = await fetchApi();\n    dispatch(receiveTypeCoinSucess(coins));\n  } catch (error) {\n    dispatch(receiveTypeCoinFailure(error));\n  }\n};\n\n// EXPENSES:\n\nconst requestExpenses = () => ({\n  type: REQUEST_EXPENSES,\n});\n\nconst receiveExpensesSucess = (expenses) => ({\n  type: RECEIVE_EXPENSES_SUCESS,\n  expenses,\n});\n\nconst receiveExpensesFailure = (error) => ({\n  type: RECEIVE_EXPENSES_FAILURE,\n  error,\n});\n\nconst fetchExpenses = async (dispatch) => {\n  dispatch(requestExpenses());\n\n  try {\n    const expenses = fetchApi();\n    delete expenses.USDT;\n    dispatch(receiveExpensesSucess(expenses));\n  } catch (error) {\n    dispatch(receiveExpensesFailure(error));\n  }\n};\n\n// OUTRAS:\n\nexport function saveEmail(email) {\n  return {\n    type: SET_EMAIL,\n    email,\n  };\n}\n"],"mappings":"AAAA,SAASA,kBAAT,EACEC,0BADF,EAEEC,yBAFF,EAGEC,SAHF,EAIEC,uBAJF,EAKEC,wBALF,EAMEC,gBANF,QAOO,eAPP;AAQA,OAAOC,QAAP,MAAqB,yBAArB,C,CAEA;;AAEA,MAAMC,gBAAgB,GAAG,OAAO;EAC9BC,IAAI,EAAET;AADwB,CAAP,CAAzB;;AAIA,MAAMU,MAAM,GAAIC,KAAD,IAAW;EACxB,MAAMC,SAAS,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAZ,CAAlB;EACA,MAAMI,aAAa,GAAGH,SAAS,CAACI,MAAV,CAAkBC,IAAD,IAAWA,IAAI,KAAK,MAAT,GAC9CA,IAD8C,GACvC,EADW,CAAtB;EAEA,OAAOF,aAAP;AACD,CALD;;AAOA,MAAMG,qBAAqB,GAAIC,KAAD,KAAY;EACxCV,IAAI,EAAEP,yBADkC;EAExCkB,UAAU,EAAEV,MAAM,CAACS,KAAD;AAFsB,CAAZ,CAA9B;;AAKA,MAAME,sBAAsB,GAAIC,KAAD,KAAY;EACzCb,IAAI,EAAER,0BADmC;EAEzCqB;AAFyC,CAAZ,CAA/B;;AAKA,OAAO,MAAMC,cAAc,GAAG,MAAM,MAAOC,QAAP,IAAoB;EACtDA,QAAQ,CAAChB,gBAAgB,EAAjB,CAAR;;EAEA,IAAI;IACF,MAAMW,KAAK,GAAG,MAAMZ,QAAQ,EAA5B;IACAiB,QAAQ,CAACN,qBAAqB,CAACC,KAAD,CAAtB,CAAR;EACD,CAHD,CAGE,OAAOG,KAAP,EAAc;IACdE,QAAQ,CAACH,sBAAsB,CAACC,KAAD,CAAvB,CAAR;EACD;AACF,CATM,C,CAWP;;AAEA,MAAMG,eAAe,GAAG,OAAO;EAC7BhB,IAAI,EAAEH;AADuB,CAAP,CAAxB;;AAIA,MAAMoB,qBAAqB,GAAIC,QAAD,KAAe;EAC3ClB,IAAI,EAAEL,uBADqC;EAE3CuB;AAF2C,CAAf,CAA9B;;AAKA,MAAMC,sBAAsB,GAAIN,KAAD,KAAY;EACzCb,IAAI,EAAEJ,wBADmC;EAEzCiB;AAFyC,CAAZ,CAA/B;;AAKA,MAAMO,aAAa,GAAG,MAAOL,QAAP,IAAoB;EACxCA,QAAQ,CAACC,eAAe,EAAhB,CAAR;;EAEA,IAAI;IACF,MAAME,QAAQ,GAAGpB,QAAQ,EAAzB;IACA,OAAOoB,QAAQ,CAACG,IAAhB;IACAN,QAAQ,CAACE,qBAAqB,CAACC,QAAD,CAAtB,CAAR;EACD,CAJD,CAIE,OAAOL,KAAP,EAAc;IACdE,QAAQ,CAACI,sBAAsB,CAACN,KAAD,CAAvB,CAAR;EACD;AACF,CAVD,C,CAYA;;;AAEA,OAAO,SAASS,SAAT,CAAmBC,KAAnB,EAA0B;EAC/B,OAAO;IACLvB,IAAI,EAAEN,SADD;IAEL6B;EAFK,CAAP;AAID"},"metadata":{},"sourceType":"module"}